/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useApiContext, ApiContext } from "./apiContext";
import type * as Fetcher from "./apiFetcher";
import { apiFetch } from "./apiFetcher";
import type * as Schemas from "./apiSchemas";

export type InitializeError = Fetcher.ErrorWrapper<undefined>;

export type InitializeResponse = {
  /**
   * 実装言語
   */
  language: "go" | "perl" | "php" | "python" | "ruby" | "rust" | "node";
};

export type InitializeVariables = ApiContext["fetcherOptions"];

export const fetchInitialize = (
  variables: InitializeVariables,
  signal?: AbortSignal,
) =>
  apiFetch<InitializeResponse, InitializeError, undefined, {}, {}, {}>({
    url: "/initialize",
    method: "post",
    ...variables,
    signal,
  });

export const useInitialize = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      InitializeResponse,
      InitializeError,
      InitializeVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    InitializeResponse,
    InitializeError,
    InitializeVariables
  >({
    mutationFn: (variables: InitializeVariables) =>
      fetchInitialize({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type RegisterUserError = Fetcher.ErrorWrapper<undefined>;

export type RegisterUserResponse = {
  /**
   * アクセストークン
   */
  access_token: string;
};

export type RegisterUserRequestBody = {
  /**
   * ユーザー名
   */
  username: string;
  /**
   * 名前
   */
  firstname: string;
  /**
   * 名字
   */
  lastname: string;
  /**
   * 生年月日
   */
  date_of_birth: string;
  [""]?: string;
};

export type RegisterUserVariables = {
  body: RegisterUserRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchRegisterUser = (
  variables: RegisterUserVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    RegisterUserResponse,
    RegisterUserError,
    RegisterUserRequestBody,
    {},
    {},
    {}
  >({ url: "/app/register", method: "post", ...variables, signal });

export const useRegisterUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      RegisterUserResponse,
      RegisterUserError,
      RegisterUserVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    RegisterUserResponse,
    RegisterUserError,
    RegisterUserVariables
  >({
    mutationFn: (variables: RegisterUserVariables) =>
      fetchRegisterUser({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PostRequestError = Fetcher.ErrorWrapper<undefined>;

export type PostRequestResponse = {
  /**
   * 配車要求ID
   */
  request_id: string;
};

export type PostRequestRequestBody = {
  /**
   * 配車位置
   */
  pickup_coordinate: Schemas.Coordinate;
  /**
   * 目的地
   */
  destination_coordinate: Schemas.Coordinate;
};

export type PostRequestVariables = {
  body: PostRequestRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostRequest = (
  variables: PostRequestVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    PostRequestResponse,
    PostRequestError,
    PostRequestRequestBody,
    {},
    {},
    {}
  >({ url: "/app/requests", method: "post", ...variables, signal });

export const usePostRequest = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      PostRequestResponse,
      PostRequestError,
      PostRequestVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    PostRequestResponse,
    PostRequestError,
    PostRequestVariables
  >({
    mutationFn: (variables: PostRequestVariables) =>
      fetchPostRequest({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GetAppRequestPathParams = {
  /**
   * 配車要求ID
   */
  requestId: string;
};

export type GetAppRequestError = Fetcher.ErrorWrapper<undefined>;

export type GetAppRequestResponse = {
  /**
   * 配車要求ID
   */
  request_id: string;
  /**
   * 配車位置
   */
  pickup_coordinate: Schemas.Coordinate;
  /**
   * 目的地
   */
  destination_coordinate: Schemas.Coordinate;
  status: Schemas.RequestStatus;
  /**
   * ドライバー情報
   */
  driver?: Schemas.Driver;
  /**
   * 配車要求日時
   */
  created_at: number;
  /**
   * 配車要求更新日時
   */
  updated_at: number;
};

export type GetAppRequestVariables = {
  pathParams: GetAppRequestPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetAppRequest = (
  variables: GetAppRequestVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    GetAppRequestResponse,
    GetAppRequestError,
    undefined,
    {},
    {},
    GetAppRequestPathParams
  >({ url: "/app/requests/{requestId}", method: "get", ...variables, signal });

export const useGetAppRequest = <TData = GetAppRequestResponse,>(
  variables: GetAppRequestVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetAppRequestResponse,
      GetAppRequestError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetAppRequestResponse, GetAppRequestError, TData>({
    queryKey: queryKeyFn({
      path: "/app/requests/{requestId}",
      operationId: "getAppRequest",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetAppRequest({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type EvaluatePathParams = {
  /**
   * 配車要求ID
   */
  requestId: string;
};

export type EvaluateError = Fetcher.ErrorWrapper<undefined>;

export type EvaluateRequestBody = {
  /**
   * ドライバーの評価
   *
   * @minimum 1
   * @maximum 5
   */
  evaluation: number;
};

export type EvaluateVariables = {
  body: EvaluateRequestBody;
  pathParams: EvaluatePathParams;
} & ApiContext["fetcherOptions"];

export const fetchEvaluate = (
  variables: EvaluateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    EvaluateError,
    EvaluateRequestBody,
    {},
    {},
    EvaluatePathParams
  >({
    url: "/app/requests/{requestId}/evaluate",
    method: "post",
    ...variables,
    signal,
  });

export const useEvaluate = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, EvaluateError, EvaluateVariables>,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, EvaluateError, EvaluateVariables>({
    mutationFn: (variables: EvaluateVariables) =>
      fetchEvaluate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PostInquiryError = Fetcher.ErrorWrapper<undefined>;

export type PostInquiryRequestBody = {
  /**
   * 件名
   */
  subject: string;
  /**
   * 問い合わせ内容
   */
  body: string;
};

export type PostInquiryVariables = {
  body: PostInquiryRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchPostInquiry = (
  variables: PostInquiryVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, PostInquiryError, PostInquiryRequestBody, {}, {}, {}>({
    url: "/app/inquiry",
    method: "post",
    ...variables,
    signal,
  });

export const usePostInquiry = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PostInquiryError,
      PostInquiryVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    PostInquiryError,
    PostInquiryVariables
  >({
    mutationFn: (variables: PostInquiryVariables) =>
      fetchPostInquiry({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GetAppNotificationError = Fetcher.ErrorWrapper<undefined>;

export type GetAppNotificationVariables = ApiContext["fetcherOptions"];

/**
 * ポーリング方式にしない場合に、ユーザーのアプリに配車要求の各種状態遷移を通知するなどに使う想定
 */
export const fetchGetAppNotification = (
  variables: GetAppNotificationVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, GetAppNotificationError, undefined, {}, {}, {}>({
    url: "/app/notification",
    method: "get",
    ...variables,
    signal,
  });

/**
 * ポーリング方式にしない場合に、ユーザーのアプリに配車要求の各種状態遷移を通知するなどに使う想定
 */
export const useGetAppNotification = <TData = undefined,>(
  variables: GetAppNotificationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetAppNotificationError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetAppNotificationError, TData>({
    queryKey: queryKeyFn({
      path: "/app/notification",
      operationId: "getAppNotification",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetAppNotification({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type RegisterDriverError = Fetcher.ErrorWrapper<undefined>;

export type RegisterDriverResponse = {
  /**
   * アクセストークン
   */
  access_token: string;
};

export type RegisterDriverRequestBody = {
  /**
   * ドライバー名
   */
  username: string;
  /**
   * 名前
   */
  firstname: string;
  /**
   * 名字
   */
  lastname: string;
  /**
   * 生年月日
   */
  date_of_birth: string;
  /**
   * 車種
   */
  car_model: string;
  /**
   * カーナンバー
   */
  car_no: string;
};

export type RegisterDriverVariables = {
  body: RegisterDriverRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchRegisterDriver = (
  variables: RegisterDriverVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    RegisterDriverResponse,
    RegisterDriverError,
    RegisterDriverRequestBody,
    {},
    {},
    {}
  >({ url: "/driver/register", method: "post", ...variables, signal });

export const useRegisterDriver = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      RegisterDriverResponse,
      RegisterDriverError,
      RegisterDriverVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    RegisterDriverResponse,
    RegisterDriverError,
    RegisterDriverVariables
  >({
    mutationFn: (variables: RegisterDriverVariables) =>
      fetchRegisterDriver({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActivateDriverError = Fetcher.ErrorWrapper<undefined>;

export type ActivateDriverVariables = {
  body?: Record<string, any>;
} & ApiContext["fetcherOptions"];

export const fetchActivateDriver = (
  variables: ActivateDriverVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, ActivateDriverError, Record<string, any>, {}, {}, {}>({
    url: "/driver/activate",
    method: "post",
    ...variables,
    signal,
  });

export const useActivateDriver = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActivateDriverError,
      ActivateDriverVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    ActivateDriverError,
    ActivateDriverVariables
  >({
    mutationFn: (variables: ActivateDriverVariables) =>
      fetchActivateDriver({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type DeactivateDriverError = Fetcher.ErrorWrapper<undefined>;

export type DeactivateDriverVariables = {
  body?: Record<string, any>;
} & ApiContext["fetcherOptions"];

export const fetchDeactivateDriver = (
  variables: DeactivateDriverVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, DeactivateDriverError, Record<string, any>, {}, {}, {}>({
    url: "/driver/deactivate",
    method: "post",
    ...variables,
    signal,
  });

export const useDeactivateDriver = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeactivateDriverError,
      DeactivateDriverVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DeactivateDriverError,
    DeactivateDriverVariables
  >({
    mutationFn: (variables: DeactivateDriverVariables) =>
      fetchDeactivateDriver({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PostDriverCoordinateError = Fetcher.ErrorWrapper<undefined>;

export type PostDriverCoordinateVariables = {
  body: Schemas.Coordinate;
} & ApiContext["fetcherOptions"];

export const fetchPostDriverCoordinate = (
  variables: PostDriverCoordinateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    PostDriverCoordinateError,
    Schemas.Coordinate,
    {},
    {},
    {}
  >({ url: "/driver/coordinate", method: "post", ...variables, signal });

export const usePostDriverCoordinate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      PostDriverCoordinateError,
      PostDriverCoordinateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    PostDriverCoordinateError,
    PostDriverCoordinateVariables
  >({
    mutationFn: (variables: PostDriverCoordinateVariables) =>
      fetchPostDriverCoordinate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GetRequestPathParams = {
  /**
   * 配車要求ID
   */
  requestId: string;
};

export type GetRequestError = Fetcher.ErrorWrapper<undefined>;

export type GetRequestResponse = {
  /**
   * ユーザー情報
   */
  user: Schemas.User;
  /**
   * 目的地
   */
  destination_coordinate: Schemas.Coordinate;
  status?: Schemas.RequestStatus;
};

export type GetRequestVariables = {
  pathParams: GetRequestPathParams;
} & ApiContext["fetcherOptions"];

/**
 * ドライバー向け通知エンドポイントから通知されたidの情報を取得する想定
 */
export const fetchGetRequest = (
  variables: GetRequestVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    GetRequestResponse,
    GetRequestError,
    undefined,
    {},
    {},
    GetRequestPathParams
  >({
    url: "/driver/requests/{requestId}",
    method: "get",
    ...variables,
    signal,
  });

/**
 * ドライバー向け通知エンドポイントから通知されたidの情報を取得する想定
 */
export const useGetRequest = <TData = GetRequestResponse,>(
  variables: GetRequestVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetRequestResponse, GetRequestError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetRequestResponse, GetRequestError, TData>({
    queryKey: queryKeyFn({
      path: "/driver/requests/{requestId}",
      operationId: "getRequest",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetRequest({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type AcceptRequestPathParams = {
  /**
   * 配車要求ID
   */
  requestId: string;
};

export type AcceptRequestError = Fetcher.ErrorWrapper<undefined>;

export type AcceptRequestVariables = {
  pathParams: AcceptRequestPathParams;
} & ApiContext["fetcherOptions"];

export const fetchAcceptRequest = (
  variables: AcceptRequestVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    AcceptRequestError,
    undefined,
    {},
    {},
    AcceptRequestPathParams
  >({
    url: "/driver/requests/{requestId}/accept",
    method: "post",
    ...variables,
    signal,
  });

export const useAcceptRequest = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      AcceptRequestError,
      AcceptRequestVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    AcceptRequestError,
    AcceptRequestVariables
  >({
    mutationFn: (variables: AcceptRequestVariables) =>
      fetchAcceptRequest({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type DenyRequestPathParams = {
  /**
   * 配車要求ID
   */
  requestId: string;
};

export type DenyRequestError = Fetcher.ErrorWrapper<undefined>;

export type DenyRequestVariables = {
  pathParams: DenyRequestPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDenyRequest = (
  variables: DenyRequestVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    DenyRequestError,
    undefined,
    {},
    {},
    DenyRequestPathParams
  >({
    url: "/driver/requests/{requestId}/deny",
    method: "post",
    ...variables,
    signal,
  });

export const useDenyRequest = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DenyRequestError,
      DenyRequestVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    DenyRequestError,
    DenyRequestVariables
  >({
    mutationFn: (variables: DenyRequestVariables) =>
      fetchDenyRequest({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type DepartPathParams = {
  /**
   * 配車要求ID
   */
  requestId: string;
};

export type DepartError = Fetcher.ErrorWrapper<undefined>;

export type DepartVariables = {
  pathParams: DepartPathParams;
} & ApiContext["fetcherOptions"];

export const fetchDepart = (variables: DepartVariables, signal?: AbortSignal) =>
  apiFetch<undefined, DepartError, undefined, {}, {}, DepartPathParams>({
    url: "/driver/requests/{requestId}/depart",
    method: "post",
    ...variables,
    signal,
  });

export const useDepart = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, DepartError, DepartVariables>,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<undefined, DepartError, DepartVariables>({
    mutationFn: (variables: DepartVariables) =>
      fetchDepart({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GetDriverNotificationError = Fetcher.ErrorWrapper<undefined>;

export type GetDriverNotificationVariables = ApiContext["fetcherOptions"];

/**
 * ドライバーに配車要求を通知するなどで使う想定
 */
export const fetchGetDriverNotification = (
  variables: GetDriverNotificationVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, GetDriverNotificationError, undefined, {}, {}, {}>({
    url: "/driver/notification",
    method: "get",
    ...variables,
    signal,
  });

/**
 * ドライバーに配車要求を通知するなどで使う想定
 */
export const useGetDriverNotification = <TData = undefined,>(
  variables: GetDriverNotificationVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, GetDriverNotificationError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, GetDriverNotificationError, TData>({
    queryKey: queryKeyFn({
      path: "/driver/notification",
      operationId: "getDriverNotification",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetDriverNotification({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type GetInquiriesQueryParams = {
  /**
   * 取得件数
   */
  limit?: number;
  /**
   * 取得カーソル
   */
  cursor?: string;
};

export type GetInquiriesError = Fetcher.ErrorWrapper<undefined>;

export type GetInquiriesResponse = {
  inquiries: {
    /**
     * 問い合わせID
     */
    id: string;
    /**
     * 件名
     */
    subject: string;
    /**
     * 問い合わせ日時
     */
    created_at: number;
  }[];
};

export type GetInquiriesVariables = {
  queryParams?: GetInquiriesQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetInquiries = (
  variables: GetInquiriesVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    GetInquiriesResponse,
    GetInquiriesError,
    undefined,
    {},
    GetInquiriesQueryParams,
    {}
  >({ url: "/admin/inquiries", method: "get", ...variables, signal });

export const useGetInquiries = <TData = GetInquiriesResponse,>(
  variables: GetInquiriesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetInquiriesResponse, GetInquiriesError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetInquiriesResponse, GetInquiriesError, TData>({
    queryKey: queryKeyFn({
      path: "/admin/inquiries",
      operationId: "getInquiries",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetInquiries({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type GetInquiryPathParams = {
  /**
   * 問い合わせID
   */
  inquiryId: string;
};

export type GetInquiryError = Fetcher.ErrorWrapper<undefined>;

export type GetInquiryVariables = {
  pathParams: GetInquiryPathParams;
} & ApiContext["fetcherOptions"];

export const fetchGetInquiry = (
  variables: GetInquiryVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.InquiryContent,
    GetInquiryError,
    undefined,
    {},
    {},
    GetInquiryPathParams
  >({
    url: "/admin/inquiries/{inquiryId}",
    method: "get",
    ...variables,
    signal,
  });

export const useGetInquiry = <TData = Schemas.InquiryContent,>(
  variables: GetInquiryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.InquiryContent, GetInquiryError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.InquiryContent, GetInquiryError, TData>({
    queryKey: queryKeyFn({
      path: "/admin/inquiries/{inquiryId}",
      operationId: "getInquiry",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetInquiry({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation =
  | {
      path: "/app/requests/{requestId}";
      operationId: "getAppRequest";
      variables: GetAppRequestVariables;
    }
  | {
      path: "/app/notification";
      operationId: "getAppNotification";
      variables: GetAppNotificationVariables;
    }
  | {
      path: "/driver/requests/{requestId}";
      operationId: "getRequest";
      variables: GetRequestVariables;
    }
  | {
      path: "/driver/notification";
      operationId: "getDriverNotification";
      variables: GetDriverNotificationVariables;
    }
  | {
      path: "/admin/inquiries";
      operationId: "getInquiries";
      variables: GetInquiriesVariables;
    }
  | {
      path: "/admin/inquiries/{inquiryId}";
      operationId: "getInquiry";
      variables: GetInquiryVariables;
    };
