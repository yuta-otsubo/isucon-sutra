// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "a"

				if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'd': // Prefix: "dmin/inquiries"

					if l := len("dmin/inquiries"); len(elem) >= l && elem[0:l] == "dmin/inquiries" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetInquiriesRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "inquiry_id"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetInquiryRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					}

				case 'p': // Prefix: "pp/"

					if l := len("pp/"); len(elem) >= l && elem[0:l] == "pp/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'i': // Prefix: "inquiry"

						if l := len("inquiry"); len(elem) >= l && elem[0:l] == "inquiry" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handlePostInquiryRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 'n': // Prefix: "notification"

						if l := len("notification"); len(elem) >= l && elem[0:l] == "notification" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetAppNotificationRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					case 'r': // Prefix: "re"

						if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'g': // Prefix: "gister"

							if l := len("gister"); len(elem) >= l && elem[0:l] == "gister" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleRegisterUserRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 'q': // Prefix: "quests"

							if l := len("quests"); len(elem) >= l && elem[0:l] == "quests" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "POST":
									s.handlePostRequestRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "request_id"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[0] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetAppRequestRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/evaluate"

									if l := len("/evaluate"); len(elem) >= l && elem[0:l] == "/evaluate" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleEvaluateRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

								}

							}

						}

					}

				}

			case 'd': // Prefix: "driver/"

				if l := len("driver/"); len(elem) >= l && elem[0:l] == "driver/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "activate"

					if l := len("activate"); len(elem) >= l && elem[0:l] == "activate" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleActivateDriverRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 'c': // Prefix: "coordinate"

					if l := len("coordinate"); len(elem) >= l && elem[0:l] == "coordinate" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handlePostDriverCoordinateRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 'd': // Prefix: "deactivate"

					if l := len("deactivate"); len(elem) >= l && elem[0:l] == "deactivate" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleDeactivateDriverRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 'n': // Prefix: "notification"

					if l := len("notification"); len(elem) >= l && elem[0:l] == "notification" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetDriverNotificationRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

				case 'r': // Prefix: "re"

					if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'g': // Prefix: "gister"

						if l := len("gister"); len(elem) >= l && elem[0:l] == "gister" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleRegisterDriverRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 'q': // Prefix: "quests/"

						if l := len("quests/"); len(elem) >= l && elem[0:l] == "quests/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "request_id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetRequestRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "accept"

								if l := len("accept"); len(elem) >= l && elem[0:l] == "accept" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleAcceptRequestRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							case 'd': // Prefix: "de"

								if l := len("de"); len(elem) >= l && elem[0:l] == "de" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'n': // Prefix: "ny"

									if l := len("ny"); len(elem) >= l && elem[0:l] == "ny" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleDenyRequestRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

								case 'p': // Prefix: "part"

									if l := len("part"); len(elem) >= l && elem[0:l] == "part" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleDepartRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

								}

							}

						}

					}

				}

			case 'i': // Prefix: "initialize"

				if l := len("initialize"); len(elem) >= l && elem[0:l] == "initialize" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleInitializeRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}

			}

		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "a"

				if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'd': // Prefix: "dmin/inquiries"

					if l := len("dmin/inquiries"); len(elem) >= l && elem[0:l] == "dmin/inquiries" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = GetInquiriesOperation
							r.summary = "問い合わせの一覧を取得する"
							r.operationID = "get-inquiries"
							r.pathPattern = "/admin/inquiries"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "inquiry_id"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = GetInquiryOperation
								r.summary = "指定したIDの問い合わせ内容を取得"
								r.operationID = "get-inquiry"
								r.pathPattern = "/admin/inquiries/{inquiry_id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					}

				case 'p': // Prefix: "pp/"

					if l := len("pp/"); len(elem) >= l && elem[0:l] == "pp/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'i': // Prefix: "inquiry"

						if l := len("inquiry"); len(elem) >= l && elem[0:l] == "inquiry" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = PostInquiryOperation
								r.summary = "ユーザーが問い合わせを送信する"
								r.operationID = "post-inquiry"
								r.pathPattern = "/app/inquiry"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'n': // Prefix: "notification"

						if l := len("notification"); len(elem) >= l && elem[0:l] == "notification" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = GetAppNotificationOperation
								r.summary = "ユーザー向け通知エンドポイント"
								r.operationID = "get-app-notification"
								r.pathPattern = "/app/notification"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'r': // Prefix: "re"

						if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'g': // Prefix: "gister"

							if l := len("gister"); len(elem) >= l && elem[0:l] == "gister" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = RegisterUserOperation
									r.summary = "ユーザーが会員登録を行う"
									r.operationID = "register-user"
									r.pathPattern = "/app/register"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'q': // Prefix: "quests"

							if l := len("quests"); len(elem) >= l && elem[0:l] == "quests" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									r.name = PostRequestOperation
									r.summary = "ユーザーが配車要求を行う"
									r.operationID = "post-request"
									r.pathPattern = "/app/requests"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "request_id"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[0] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = GetAppRequestOperation
										r.summary = "ユーザーが配車要求の状態を確認する"
										r.operationID = "get-app-request"
										r.pathPattern = "/app/requests/{request_id}"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/evaluate"

									if l := len("/evaluate"); len(elem) >= l && elem[0:l] == "/evaluate" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = EvaluateOperation
											r.summary = "ユーザーがドライバーを評価する"
											r.operationID = "evaluate"
											r.pathPattern = "/app/requests/{request_id}/evaluate"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

								}

							}

						}

					}

				}

			case 'd': // Prefix: "driver/"

				if l := len("driver/"); len(elem) >= l && elem[0:l] == "driver/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "activate"

					if l := len("activate"); len(elem) >= l && elem[0:l] == "activate" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = ActivateDriverOperation
							r.summary = "ドライバーが配車受付を開始する"
							r.operationID = "activate-driver"
							r.pathPattern = "/driver/activate"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'c': // Prefix: "coordinate"

					if l := len("coordinate"); len(elem) >= l && elem[0:l] == "coordinate" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = PostDriverCoordinateOperation
							r.summary = "ドライバーが位置情報を送信する"
							r.operationID = "post-driver-coordinate"
							r.pathPattern = "/driver/coordinate"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'd': // Prefix: "deactivate"

					if l := len("deactivate"); len(elem) >= l && elem[0:l] == "deactivate" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = DeactivateDriverOperation
							r.summary = "ドライバーが配車受付を停止する"
							r.operationID = "deactivate-driver"
							r.pathPattern = "/driver/deactivate"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'n': // Prefix: "notification"

					if l := len("notification"); len(elem) >= l && elem[0:l] == "notification" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = GetDriverNotificationOperation
							r.summary = "ドライバー向け通知エンドポイント"
							r.operationID = "get-driver-notification"
							r.pathPattern = "/driver/notification"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'r': // Prefix: "re"

					if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'g': // Prefix: "gister"

						if l := len("gister"); len(elem) >= l && elem[0:l] == "gister" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = RegisterDriverOperation
								r.summary = "ドライバー登録を行う"
								r.operationID = "register-driver"
								r.pathPattern = "/driver/register"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'q': // Prefix: "quests/"

						if l := len("quests/"); len(elem) >= l && elem[0:l] == "quests/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "request_id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = GetRequestOperation
								r.summary = "ドライバーが配車要求情報を取得する"
								r.operationID = "get-request"
								r.pathPattern = "/driver/requests/{request_id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "accept"

								if l := len("accept"); len(elem) >= l && elem[0:l] == "accept" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = AcceptRequestOperation
										r.summary = "ドライバーが配車要求を受理する"
										r.operationID = "accept-request"
										r.pathPattern = "/driver/requests/{request_id}/accept"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

							case 'd': // Prefix: "de"

								if l := len("de"); len(elem) >= l && elem[0:l] == "de" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'n': // Prefix: "ny"

									if l := len("ny"); len(elem) >= l && elem[0:l] == "ny" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = DenyRequestOperation
											r.summary = "ドライバーが配車要求を拒否する"
											r.operationID = "deny-request"
											r.pathPattern = "/driver/requests/{request_id}/deny"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

								case 'p': // Prefix: "part"

									if l := len("part"); len(elem) >= l && elem[0:l] == "part" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = DepartOperation
											r.summary = "ドライバーが配車位置から出発する(ユーザーが乗車完了した)"
											r.operationID = "depart"
											r.pathPattern = "/driver/requests/{request_id}/depart"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

								}

							}

						}

					}

				}

			case 'i': // Prefix: "initialize"

				if l := len("initialize"); len(elem) >= l && elem[0:l] == "initialize" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "POST":
						r.name = InitializeOperation
						r.summary = "サービスを初期化する"
						r.operationID = "initialize"
						r.pathPattern = "/initialize"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			}

		}
	}
	return r, false
}
