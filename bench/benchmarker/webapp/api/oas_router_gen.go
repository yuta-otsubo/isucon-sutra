// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "app/"

				if l := len("app/"); len(elem) >= l && elem[0:l] == "app/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'n': // Prefix: "n"

					if l := len("n"); len(elem) >= l && elem[0:l] == "n" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'e': // Prefix: "earby-chairs"

						if l := len("earby-chairs"); len(elem) >= l && elem[0:l] == "earby-chairs" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleAppGetNearbyChairsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					case 'o': // Prefix: "otification"

						if l := len("otification"); len(elem) >= l && elem[0:l] == "otification" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleAppGetNotificationRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					}

				case 'p': // Prefix: "payment-methods"

					if l := len("payment-methods"); len(elem) >= l && elem[0:l] == "payment-methods" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleAppPostPaymentMethodsRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 'r': // Prefix: "rides"

					if l := len("rides"); len(elem) >= l && elem[0:l] == "rides" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleAppGetRidesRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleAppPostRidesRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "estimated-fare"
							origElem := elem
							if l := len("estimated-fare"); len(elem) >= l && elem[0:l] == "estimated-fare" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleAppPostRidesEstimatedFareRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						}
						// Param: "ride_id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/evaluation"

							if l := len("/evaluation"); len(elem) >= l && elem[0:l] == "/evaluation" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleAppPostRideEvaluationRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						}

					}

				case 'u': // Prefix: "users"

					if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleAppPostUsersRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				}

			case 'c': // Prefix: "chair/"

				if l := len("chair/"); len(elem) >= l && elem[0:l] == "chair/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "activity"

					if l := len("activity"); len(elem) >= l && elem[0:l] == "activity" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleChairPostActivityRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 'c': // Prefix: "c"

					if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'h': // Prefix: "hairs"

						if l := len("hairs"); len(elem) >= l && elem[0:l] == "hairs" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleChairPostChairsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 'o': // Prefix: "oordinate"

						if l := len("oordinate"); len(elem) >= l && elem[0:l] == "oordinate" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleChairPostCoordinateRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					}

				case 'n': // Prefix: "notification"

					if l := len("notification"); len(elem) >= l && elem[0:l] == "notification" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleChairGetNotificationRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

				case 'r': // Prefix: "rides/"

					if l := len("rides/"); len(elem) >= l && elem[0:l] == "rides/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "ride_id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/status"

						if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleChairPostRideStatusRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					}

				}

			case 'i': // Prefix: "in"

				if l := len("in"); len(elem) >= l && elem[0:l] == "in" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'i': // Prefix: "itialize"

					if l := len("itialize"); len(elem) >= l && elem[0:l] == "itialize" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handlePostInitializeRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 't': // Prefix: "ternal/matching"

					if l := len("ternal/matching"); len(elem) >= l && elem[0:l] == "ternal/matching" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleInternalGetMatchingRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

				}

			case 'o': // Prefix: "owner/"

				if l := len("owner/"); len(elem) >= l && elem[0:l] == "owner/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "chairs"

					if l := len("chairs"); len(elem) >= l && elem[0:l] == "chairs" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleOwnerGetChairsRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

				case 'o': // Prefix: "owners"

					if l := len("owners"); len(elem) >= l && elem[0:l] == "owners" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleOwnerPostOwnersRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 's': // Prefix: "sales"

					if l := len("sales"); len(elem) >= l && elem[0:l] == "sales" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleOwnerGetSalesRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

				}

			}

		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "app/"

				if l := len("app/"); len(elem) >= l && elem[0:l] == "app/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'n': // Prefix: "n"

					if l := len("n"); len(elem) >= l && elem[0:l] == "n" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'e': // Prefix: "earby-chairs"

						if l := len("earby-chairs"); len(elem) >= l && elem[0:l] == "earby-chairs" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = AppGetNearbyChairsOperation
								r.summary = "ユーザーの近くにいる椅子を取得する"
								r.operationID = "app-get-nearby-chairs"
								r.pathPattern = "/app/nearby-chairs"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'o': // Prefix: "otification"

						if l := len("otification"); len(elem) >= l && elem[0:l] == "otification" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = AppGetNotificationOperation
								r.summary = "ユーザー向け通知エンドポイント"
								r.operationID = "app-get-notification"
								r.pathPattern = "/app/notification"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					}

				case 'p': // Prefix: "payment-methods"

					if l := len("payment-methods"); len(elem) >= l && elem[0:l] == "payment-methods" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = AppPostPaymentMethodsOperation
							r.summary = "決済トークンの登録"
							r.operationID = "app-post-payment-methods"
							r.pathPattern = "/app/payment-methods"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'r': // Prefix: "rides"

					if l := len("rides"); len(elem) >= l && elem[0:l] == "rides" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = AppGetRidesOperation
							r.summary = "ユーザーが完了済みのライド一覧を取得する"
							r.operationID = "app-get-rides"
							r.pathPattern = "/app/rides"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = AppPostRidesOperation
							r.summary = "ユーザーが配車を要求する"
							r.operationID = "app-post-rides"
							r.pathPattern = "/app/rides"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "estimated-fare"
							origElem := elem
							if l := len("estimated-fare"); len(elem) >= l && elem[0:l] == "estimated-fare" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = AppPostRidesEstimatedFareOperation
									r.summary = "ライドの運賃を見積もる"
									r.operationID = "app-post-rides-estimated-fare"
									r.pathPattern = "/app/rides/estimated-fare"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}
						// Param: "ride_id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/evaluation"

							if l := len("/evaluation"); len(elem) >= l && elem[0:l] == "/evaluation" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = AppPostRideEvaluationOperation
									r.summary = "ユーザーがライドを評価する"
									r.operationID = "app-post-ride-evaluation"
									r.pathPattern = "/app/rides/{ride_id}/evaluation"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

						}

					}

				case 'u': // Prefix: "users"

					if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = AppPostUsersOperation
							r.summary = "ユーザーが会員登録を行う"
							r.operationID = "app-post-users"
							r.pathPattern = "/app/users"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				}

			case 'c': // Prefix: "chair/"

				if l := len("chair/"); len(elem) >= l && elem[0:l] == "chair/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "activity"

					if l := len("activity"); len(elem) >= l && elem[0:l] == "activity" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = ChairPostActivityOperation
							r.summary = "椅子が配車受付を開始・停止する"
							r.operationID = "chair-post-activity"
							r.pathPattern = "/chair/activity"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'c': // Prefix: "c"

					if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'h': // Prefix: "hairs"

						if l := len("hairs"); len(elem) >= l && elem[0:l] == "hairs" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = ChairPostChairsOperation
								r.summary = "オーナーが椅子の登録を行う"
								r.operationID = "chair-post-chairs"
								r.pathPattern = "/chair/chairs"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'o': // Prefix: "oordinate"

						if l := len("oordinate"); len(elem) >= l && elem[0:l] == "oordinate" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = ChairPostCoordinateOperation
								r.summary = "椅子が自身の位置情報を送信する"
								r.operationID = "chair-post-coordinate"
								r.pathPattern = "/chair/coordinate"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					}

				case 'n': // Prefix: "notification"

					if l := len("notification"); len(elem) >= l && elem[0:l] == "notification" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = ChairGetNotificationOperation
							r.summary = "椅子向け通知エンドポイント"
							r.operationID = "chair-get-notification"
							r.pathPattern = "/chair/notification"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'r': // Prefix: "rides/"

					if l := len("rides/"); len(elem) >= l && elem[0:l] == "rides/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "ride_id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/status"

						if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = ChairPostRideStatusOperation
								r.summary = "椅子がライドのステータスを更新する"
								r.operationID = "chair-post-ride-status"
								r.pathPattern = "/chair/rides/{ride_id}/status"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					}

				}

			case 'i': // Prefix: "in"

				if l := len("in"); len(elem) >= l && elem[0:l] == "in" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'i': // Prefix: "itialize"

					if l := len("itialize"); len(elem) >= l && elem[0:l] == "itialize" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = PostInitializeOperation
							r.summary = "サービスを初期化する"
							r.operationID = "post-initialize"
							r.pathPattern = "/initialize"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 't': // Prefix: "ternal/matching"

					if l := len("ternal/matching"); len(elem) >= l && elem[0:l] == "ternal/matching" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = InternalGetMatchingOperation
							r.summary = "ライドのマッチングを行う"
							r.operationID = "internal-get-matching"
							r.pathPattern = "/internal/matching"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				}

			case 'o': // Prefix: "owner/"

				if l := len("owner/"); len(elem) >= l && elem[0:l] == "owner/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "chairs"

					if l := len("chairs"); len(elem) >= l && elem[0:l] == "chairs" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = OwnerGetChairsOperation
							r.summary = "椅子のオーナーが管理している椅子の一覧を取得する"
							r.operationID = "owner-get-chairs"
							r.pathPattern = "/owner/chairs"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'o': // Prefix: "owners"

					if l := len("owners"); len(elem) >= l && elem[0:l] == "owners" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = OwnerPostOwnersOperation
							r.summary = "椅子のオーナーが会員登録を行う"
							r.operationID = "owner-post-owners"
							r.pathPattern = "/owner/owners"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 's': // Prefix: "sales"

					if l := len("sales"); len(elem) >= l && elem[0:l] == "sales" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = OwnerGetSalesOperation
							r.summary = "椅子のオーナーが指定期間の全体・椅子ごと・モデルごとの売上情報を取得する"
							r.operationID = "owner-get-sales"
							r.pathPattern = "/owner/sales"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				}

			}

		}
	}
	return r, false
}
