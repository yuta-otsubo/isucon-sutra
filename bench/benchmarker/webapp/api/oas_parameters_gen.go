// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// AppGetNearbyChairsParams is parameters of app-get-nearby-chairs operation.
type AppGetNearbyChairsParams struct {
	// 緯度.
	Latitude int
	// 経度.
	Longitude int
	// 検索距離.
	Distance OptInt
}

func unpackAppGetNearbyChairsParams(packed middleware.Parameters) (params AppGetNearbyChairsParams) {
	{
		key := middleware.ParameterKey{
			Name: "latitude",
			In:   "query",
		}
		params.Latitude = packed[key].(int)
	}
	{
		key := middleware.ParameterKey{
			Name: "longitude",
			In:   "query",
		}
		params.Longitude = packed[key].(int)
	}
	{
		key := middleware.ParameterKey{
			Name: "distance",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Distance = v.(OptInt)
		}
	}
	return params
}

func decodeAppGetNearbyChairsParams(args [0]string, argsEscaped bool, r *http.Request) (params AppGetNearbyChairsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: latitude.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "latitude",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.Latitude = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "latitude",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: longitude.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "longitude",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.Longitude = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "longitude",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: distance.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "distance",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDistanceVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotDistanceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Distance.SetTo(paramsDotDistanceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "distance",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// AppGetRequestParams is parameters of app-get-request operation.
type AppGetRequestParams struct {
	// 配車要求ID.
	RequestID string
}

func unpackAppGetRequestParams(packed middleware.Parameters) (params AppGetRequestParams) {
	{
		key := middleware.ParameterKey{
			Name: "request_id",
			In:   "path",
		}
		params.RequestID = packed[key].(string)
	}
	return params
}

func decodeAppGetRequestParams(args [1]string, argsEscaped bool, r *http.Request) (params AppGetRequestParams, _ error) {
	// Decode path: request_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "request_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RequestID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "request_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AppPostRequestEvaluateParams is parameters of app-post-request-evaluate operation.
type AppPostRequestEvaluateParams struct {
	// 配車要求ID.
	RequestID string
}

func unpackAppPostRequestEvaluateParams(packed middleware.Parameters) (params AppPostRequestEvaluateParams) {
	{
		key := middleware.ParameterKey{
			Name: "request_id",
			In:   "path",
		}
		params.RequestID = packed[key].(string)
	}
	return params
}

func decodeAppPostRequestEvaluateParams(args [1]string, argsEscaped bool, r *http.Request) (params AppPostRequestEvaluateParams, _ error) {
	// Decode path: request_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "request_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RequestID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "request_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ChairGetRequestParams is parameters of chair-get-request operation.
type ChairGetRequestParams struct {
	// 配車要求ID.
	RequestID string
}

func unpackChairGetRequestParams(packed middleware.Parameters) (params ChairGetRequestParams) {
	{
		key := middleware.ParameterKey{
			Name: "request_id",
			In:   "path",
		}
		params.RequestID = packed[key].(string)
	}
	return params
}

func decodeChairGetRequestParams(args [1]string, argsEscaped bool, r *http.Request) (params ChairGetRequestParams, _ error) {
	// Decode path: request_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "request_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RequestID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "request_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ChairPostRequestAcceptParams is parameters of chair-post-request-accept operation.
type ChairPostRequestAcceptParams struct {
	// 配車要求ID.
	RequestID string
}

func unpackChairPostRequestAcceptParams(packed middleware.Parameters) (params ChairPostRequestAcceptParams) {
	{
		key := middleware.ParameterKey{
			Name: "request_id",
			In:   "path",
		}
		params.RequestID = packed[key].(string)
	}
	return params
}

func decodeChairPostRequestAcceptParams(args [1]string, argsEscaped bool, r *http.Request) (params ChairPostRequestAcceptParams, _ error) {
	// Decode path: request_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "request_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RequestID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "request_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ChairPostRequestDenyParams is parameters of chair-post-request-deny operation.
type ChairPostRequestDenyParams struct {
	// 配車要求ID.
	RequestID string
}

func unpackChairPostRequestDenyParams(packed middleware.Parameters) (params ChairPostRequestDenyParams) {
	{
		key := middleware.ParameterKey{
			Name: "request_id",
			In:   "path",
		}
		params.RequestID = packed[key].(string)
	}
	return params
}

func decodeChairPostRequestDenyParams(args [1]string, argsEscaped bool, r *http.Request) (params ChairPostRequestDenyParams, _ error) {
	// Decode path: request_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "request_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RequestID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "request_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ChairPostRequestDepartParams is parameters of chair-post-request-depart operation.
type ChairPostRequestDepartParams struct {
	// 配車要求ID.
	RequestID string
}

func unpackChairPostRequestDepartParams(packed middleware.Parameters) (params ChairPostRequestDepartParams) {
	{
		key := middleware.ParameterKey{
			Name: "request_id",
			In:   "path",
		}
		params.RequestID = packed[key].(string)
	}
	return params
}

func decodeChairPostRequestDepartParams(args [1]string, argsEscaped bool, r *http.Request) (params ChairPostRequestDepartParams, _ error) {
	// Decode path: request_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "request_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RequestID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "request_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ProviderGetChairDetailParams is parameters of provider-get-chair-detail operation.
type ProviderGetChairDetailParams struct {
	// 椅子ID.
	ChairID string
}

func unpackProviderGetChairDetailParams(packed middleware.Parameters) (params ProviderGetChairDetailParams) {
	{
		key := middleware.ParameterKey{
			Name: "chair_id",
			In:   "path",
		}
		params.ChairID = packed[key].(string)
	}
	return params
}

func decodeProviderGetChairDetailParams(args [1]string, argsEscaped bool, r *http.Request) (params ProviderGetChairDetailParams, _ error) {
	// Decode path: chair_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "chair_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ChairID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "chair_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ProviderGetSalesParams is parameters of provider-get-sales operation.
type ProviderGetSalesParams struct {
	// 開始日時（含む）.
	Since OptString
	// 終了日時（含む）.
	Until OptString
}

func unpackProviderGetSalesParams(packed middleware.Parameters) (params ProviderGetSalesParams) {
	{
		key := middleware.ParameterKey{
			Name: "since",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Since = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "until",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Until = v.(OptString)
		}
	}
	return params
}

func decodeProviderGetSalesParams(args [0]string, argsEscaped bool, r *http.Request) (params ProviderGetSalesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: since.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "since",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSinceVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSinceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Since.SetTo(paramsDotSinceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "since",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: until.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "until",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUntilVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotUntilVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Until.SetTo(paramsDotUntilVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "until",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
