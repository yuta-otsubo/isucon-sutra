// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AppGetNearbyChairs implements app-get-nearby-chairs operation.
	//
	// ユーザーの近くにいる椅子を取得する.
	//
	// GET /app/nearby-chairs
	AppGetNearbyChairs(ctx context.Context, params AppGetNearbyChairsParams) (*AppGetNearbyChairsOK, error)
	// AppGetNotification implements app-get-notification operation.
	//
	// 最新の自分のライドを取得する.
	//
	// GET /app/notification
	AppGetNotification(ctx context.Context) (AppGetNotificationRes, error)
	// AppGetRide implements app-get-ride operation.
	//
	// ユーザーがライドの詳細を確認する.
	//
	// GET /app/rides/{ride_id}
	AppGetRide(ctx context.Context, params AppGetRideParams) (AppGetRideRes, error)
	// AppGetRides implements app-get-rides operation.
	//
	// ユーザーが完了済みのライド一覧を取得する.
	//
	// GET /app/rides
	AppGetRides(ctx context.Context) (*AppGetRidesOK, error)
	// AppPostPaymentMethods implements app-post-payment-methods operation.
	//
	// 決済トークンの登録.
	//
	// POST /app/payment-methods
	AppPostPaymentMethods(ctx context.Context, req OptAppPostPaymentMethodsReq) (AppPostPaymentMethodsRes, error)
	// AppPostRideEvaluation implements app-post-ride-evaluation operation.
	//
	// ユーザーがライドを評価する.
	//
	// POST /app/rides/{ride_id}/evaluation
	AppPostRideEvaluation(ctx context.Context, req OptAppPostRideEvaluationReq, params AppPostRideEvaluationParams) (AppPostRideEvaluationRes, error)
	// AppPostRides implements app-post-rides operation.
	//
	// ユーザーが配車を要求する.
	//
	// POST /app/rides
	AppPostRides(ctx context.Context, req OptAppPostRidesReq) (AppPostRidesRes, error)
	// AppPostRidesEstimatedFare implements app-post-rides-estimated-fare operation.
	//
	// ライドの運賃を見積もる.
	//
	// POST /app/rides/estimated-fare
	AppPostRidesEstimatedFare(ctx context.Context, req OptAppPostRidesEstimatedFareReq) (AppPostRidesEstimatedFareRes, error)
	// AppPostUsers implements app-post-users operation.
	//
	// ユーザーが会員登録を行う.
	//
	// POST /app/users
	AppPostUsers(ctx context.Context, req OptAppPostUsersReq) (AppPostUsersRes, error)
	// ChairGetNotification implements chair-get-notification operation.
	//
	// 椅子に配車要求を通知するなどで使う想定.
	//
	// GET /chair/notification
	ChairGetNotification(ctx context.Context) (ChairGetNotificationRes, error)
	// ChairPostActivity implements chair-post-activity operation.
	//
	// 椅子が配車受付を開始・停止する.
	//
	// POST /chair/activity
	ChairPostActivity(ctx context.Context, req OptChairPostActivityReq) error
	// ChairPostChairs implements chair-post-chairs operation.
	//
	// オーナーが椅子の登録を行う.
	//
	// POST /chair/chairs
	ChairPostChairs(ctx context.Context, req OptChairPostChairsReq) (*ChairPostChairsCreatedHeaders, error)
	// ChairPostCoordinate implements chair-post-coordinate operation.
	//
	// 椅子が自身の位置情報を送信する.
	//
	// POST /chair/coordinate
	ChairPostCoordinate(ctx context.Context, req OptCoordinate) (*ChairPostCoordinateOK, error)
	// ChairPostRideStatus implements chair-post-ride-status operation.
	//
	// 椅子がライドのステータスを更新する.
	//
	// POST /chair/rides/{ride_id}/status
	ChairPostRideStatus(ctx context.Context, req OptChairPostRideStatusReq, params ChairPostRideStatusParams) (ChairPostRideStatusRes, error)
	// OwnerGetChair implements owner-get-chair operation.
	//
	// 管理している椅子の詳細を取得する.
	//
	// GET /owner/chairs/{chair_id}
	OwnerGetChair(ctx context.Context, params OwnerGetChairParams) (*OwnerGetChairOK, error)
	// OwnerGetChairs implements owner-get-chairs operation.
	//
	// 椅子のオーナーが管理している椅子の一覧を取得する.
	//
	// GET /owner/chairs
	OwnerGetChairs(ctx context.Context) (*OwnerGetChairsOK, error)
	// OwnerGetSales implements owner-get-sales operation.
	//
	// 椅子のオーナーが指定期間の全体・椅子ごと・モデルごとの売上情報を取得する.
	//
	// GET /owner/sales
	OwnerGetSales(ctx context.Context, params OwnerGetSalesParams) (*OwnerGetSalesOK, error)
	// OwnerPostOwners implements owner-post-owners operation.
	//
	// 椅子のオーナーが会員登録を行う.
	//
	// POST /owner/owners
	OwnerPostOwners(ctx context.Context, req OptOwnerPostOwnersReq) (OwnerPostOwnersRes, error)
	// PostInitialize implements post-initialize operation.
	//
	// サービスを初期化する.
	//
	// POST /initialize
	PostInitialize(ctx context.Context, req OptPostInitializeReq) (*PostInitializeOK, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
