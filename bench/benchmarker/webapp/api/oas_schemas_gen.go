// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"
)

// AcceptRequestNoContent is response for AcceptRequest operation.
type AcceptRequestNoContent struct{}

func (*AcceptRequestNoContent) acceptRequestRes() {}

// AcceptRequestNotFound is response for AcceptRequest operation.
type AcceptRequestNotFound struct{}

func (*AcceptRequestNotFound) acceptRequestRes() {}

// ActivateDriverNoContent is response for ActivateDriver operation.
type ActivateDriverNoContent struct{}

type ActivateDriverReq struct{}

// 座標情報.
// Ref: #/components/schemas/Coordinate
type Coordinate struct {
	// 経度.
	Latitude float64 `json:"latitude"`
	// 緯度.
	Longitude float64 `json:"longitude"`
}

// GetLatitude returns the value of Latitude.
func (s *Coordinate) GetLatitude() float64 {
	return s.Latitude
}

// GetLongitude returns the value of Longitude.
func (s *Coordinate) GetLongitude() float64 {
	return s.Longitude
}

// SetLatitude sets the value of Latitude.
func (s *Coordinate) SetLatitude(val float64) {
	s.Latitude = val
}

// SetLongitude sets the value of Longitude.
func (s *Coordinate) SetLongitude(val float64) {
	s.Longitude = val
}

// DeactivateDriverNoContent is response for DeactivateDriver operation.
type DeactivateDriverNoContent struct{}

type DeactivateDriverReq struct{}

// DenyRequestNoContent is response for DenyRequest operation.
type DenyRequestNoContent struct{}

func (*DenyRequestNoContent) denyRequestRes() {}

// DenyRequestNotFound is response for DenyRequest operation.
type DenyRequestNotFound struct{}

func (*DenyRequestNotFound) denyRequestRes() {}

// DepartBadRequest is response for Depart operation.
type DepartBadRequest struct{}

func (*DepartBadRequest) departRes() {}

// DepartNoContent is response for Depart operation.
type DepartNoContent struct{}

func (*DepartNoContent) departRes() {}

// DepartNotFound is response for Depart operation.
type DepartNotFound struct{}

func (*DepartNotFound) departRes() {}

// 簡易ドライバー情報.
// Ref: #/components/schemas/Driver
type Driver struct {
	// ドライバーID.
	ID string `json:"id"`
	// ドライバー名.
	Name string `json:"name"`
	// 車種.
	CarModel string `json:"car_model"`
	// カーナンバー.
	CarNo string `json:"car_no"`
}

// GetID returns the value of ID.
func (s *Driver) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *Driver) GetName() string {
	return s.Name
}

// GetCarModel returns the value of CarModel.
func (s *Driver) GetCarModel() string {
	return s.CarModel
}

// GetCarNo returns the value of CarNo.
func (s *Driver) GetCarNo() string {
	return s.CarNo
}

// SetID sets the value of ID.
func (s *Driver) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Driver) SetName(val string) {
	s.Name = val
}

// SetCarModel sets the value of CarModel.
func (s *Driver) SetCarModel(val string) {
	s.CarModel = val
}

// SetCarNo sets the value of CarNo.
func (s *Driver) SetCarNo(val string) {
	s.CarNo = val
}

// EvaluateBadRequest is response for Evaluate operation.
type EvaluateBadRequest struct{}

func (*EvaluateBadRequest) evaluateRes() {}

// EvaluateNoContent is response for Evaluate operation.
type EvaluateNoContent struct{}

func (*EvaluateNoContent) evaluateRes() {}

// EvaluateNotFound is response for Evaluate operation.
type EvaluateNotFound struct{}

func (*EvaluateNotFound) evaluateRes() {}

type EvaluateReq struct {
	// ドライバーの評価.
	Evaluation int `json:"evaluation"`
}

// GetEvaluation returns the value of Evaluation.
func (s *EvaluateReq) GetEvaluation() int {
	return s.Evaluation
}

// SetEvaluation sets the value of Evaluation.
func (s *EvaluateReq) SetEvaluation(val int) {
	s.Evaluation = val
}

// GetAppNotificationOK is response for GetAppNotification operation.
type GetAppNotificationOK struct{}

// GetAppRequestNotFound is response for GetAppRequest operation.
type GetAppRequestNotFound struct{}

func (*GetAppRequestNotFound) getAppRequestRes() {}

type GetAppRequestOK struct {
	// 配車要求ID.
	RequestID string `json:"request_id"`
	// 配車位置.
	PickupCoordinate Coordinate `json:"pickup_coordinate"`
	// 目的地.
	DestinationCoordinate Coordinate    `json:"destination_coordinate"`
	Status                RequestStatus `json:"status"`
	// ドライバー情報.
	Driver OptDriver `json:"driver"`
	// 配車要求日時.
	CreatedAt float64 `json:"created_at"`
	// 配車要求更新日時.
	UpdatedAt float64 `json:"updated_at"`
}

// GetRequestID returns the value of RequestID.
func (s *GetAppRequestOK) GetRequestID() string {
	return s.RequestID
}

// GetPickupCoordinate returns the value of PickupCoordinate.
func (s *GetAppRequestOK) GetPickupCoordinate() Coordinate {
	return s.PickupCoordinate
}

// GetDestinationCoordinate returns the value of DestinationCoordinate.
func (s *GetAppRequestOK) GetDestinationCoordinate() Coordinate {
	return s.DestinationCoordinate
}

// GetStatus returns the value of Status.
func (s *GetAppRequestOK) GetStatus() RequestStatus {
	return s.Status
}

// GetDriver returns the value of Driver.
func (s *GetAppRequestOK) GetDriver() OptDriver {
	return s.Driver
}

// GetCreatedAt returns the value of CreatedAt.
func (s *GetAppRequestOK) GetCreatedAt() float64 {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *GetAppRequestOK) GetUpdatedAt() float64 {
	return s.UpdatedAt
}

// SetRequestID sets the value of RequestID.
func (s *GetAppRequestOK) SetRequestID(val string) {
	s.RequestID = val
}

// SetPickupCoordinate sets the value of PickupCoordinate.
func (s *GetAppRequestOK) SetPickupCoordinate(val Coordinate) {
	s.PickupCoordinate = val
}

// SetDestinationCoordinate sets the value of DestinationCoordinate.
func (s *GetAppRequestOK) SetDestinationCoordinate(val Coordinate) {
	s.DestinationCoordinate = val
}

// SetStatus sets the value of Status.
func (s *GetAppRequestOK) SetStatus(val RequestStatus) {
	s.Status = val
}

// SetDriver sets the value of Driver.
func (s *GetAppRequestOK) SetDriver(val OptDriver) {
	s.Driver = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *GetAppRequestOK) SetCreatedAt(val float64) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *GetAppRequestOK) SetUpdatedAt(val float64) {
	s.UpdatedAt = val
}

func (*GetAppRequestOK) getAppRequestRes() {}

// GetDriverNotificationOK is response for GetDriverNotification operation.
type GetDriverNotificationOK struct{}

type GetInquiriesOK struct {
	Inquiries []GetInquiriesOKInquiriesItem `json:"inquiries"`
}

// GetInquiries returns the value of Inquiries.
func (s *GetInquiriesOK) GetInquiries() []GetInquiriesOKInquiriesItem {
	return s.Inquiries
}

// SetInquiries sets the value of Inquiries.
func (s *GetInquiriesOK) SetInquiries(val []GetInquiriesOKInquiriesItem) {
	s.Inquiries = val
}

type GetInquiriesOKInquiriesItem struct {
	// 問い合わせID.
	ID string `json:"id"`
	// 件名.
	Subject string `json:"subject"`
	// 問い合わせ日時.
	CreatedAt float64 `json:"created_at"`
}

// GetID returns the value of ID.
func (s *GetInquiriesOKInquiriesItem) GetID() string {
	return s.ID
}

// GetSubject returns the value of Subject.
func (s *GetInquiriesOKInquiriesItem) GetSubject() string {
	return s.Subject
}

// GetCreatedAt returns the value of CreatedAt.
func (s *GetInquiriesOKInquiriesItem) GetCreatedAt() float64 {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *GetInquiriesOKInquiriesItem) SetID(val string) {
	s.ID = val
}

// SetSubject sets the value of Subject.
func (s *GetInquiriesOKInquiriesItem) SetSubject(val string) {
	s.Subject = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *GetInquiriesOKInquiriesItem) SetCreatedAt(val float64) {
	s.CreatedAt = val
}

// GetInquiryNotFound is response for GetInquiry operation.
type GetInquiryNotFound struct{}

func (*GetInquiryNotFound) getInquiryRes() {}

// GetRequestNotFound is response for GetRequest operation.
type GetRequestNotFound struct{}

func (*GetRequestNotFound) getRequestRes() {}

type GetRequestOK struct {
	// 配車要求ID.
	RequestID string `json:"request_id"`
	// ユーザー情報.
	User User `json:"user"`
	// 目的地.
	DestinationCoordinate Coordinate       `json:"destination_coordinate"`
	Status                OptRequestStatus `json:"status"`
}

// GetRequestID returns the value of RequestID.
func (s *GetRequestOK) GetRequestID() string {
	return s.RequestID
}

// GetUser returns the value of User.
func (s *GetRequestOK) GetUser() User {
	return s.User
}

// GetDestinationCoordinate returns the value of DestinationCoordinate.
func (s *GetRequestOK) GetDestinationCoordinate() Coordinate {
	return s.DestinationCoordinate
}

// GetStatus returns the value of Status.
func (s *GetRequestOK) GetStatus() OptRequestStatus {
	return s.Status
}

// SetRequestID sets the value of RequestID.
func (s *GetRequestOK) SetRequestID(val string) {
	s.RequestID = val
}

// SetUser sets the value of User.
func (s *GetRequestOK) SetUser(val User) {
	s.User = val
}

// SetDestinationCoordinate sets the value of DestinationCoordinate.
func (s *GetRequestOK) SetDestinationCoordinate(val Coordinate) {
	s.DestinationCoordinate = val
}

// SetStatus sets the value of Status.
func (s *GetRequestOK) SetStatus(val OptRequestStatus) {
	s.Status = val
}

func (*GetRequestOK) getRequestRes() {}

type InitializeOK struct {
	// 実装言語.
	Language InitializeOKLanguage `json:"language"`
}

// GetLanguage returns the value of Language.
func (s *InitializeOK) GetLanguage() InitializeOKLanguage {
	return s.Language
}

// SetLanguage sets the value of Language.
func (s *InitializeOK) SetLanguage(val InitializeOKLanguage) {
	s.Language = val
}

// 実装言語.
type InitializeOKLanguage string

const (
	InitializeOKLanguageGo     InitializeOKLanguage = "go"
	InitializeOKLanguagePerl   InitializeOKLanguage = "perl"
	InitializeOKLanguagePhp    InitializeOKLanguage = "php"
	InitializeOKLanguagePython InitializeOKLanguage = "python"
	InitializeOKLanguageRuby   InitializeOKLanguage = "ruby"
	InitializeOKLanguageRust   InitializeOKLanguage = "rust"
	InitializeOKLanguageNode   InitializeOKLanguage = "node"
)

// AllValues returns all InitializeOKLanguage values.
func (InitializeOKLanguage) AllValues() []InitializeOKLanguage {
	return []InitializeOKLanguage{
		InitializeOKLanguageGo,
		InitializeOKLanguagePerl,
		InitializeOKLanguagePhp,
		InitializeOKLanguagePython,
		InitializeOKLanguageRuby,
		InitializeOKLanguageRust,
		InitializeOKLanguageNode,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InitializeOKLanguage) MarshalText() ([]byte, error) {
	switch s {
	case InitializeOKLanguageGo:
		return []byte(s), nil
	case InitializeOKLanguagePerl:
		return []byte(s), nil
	case InitializeOKLanguagePhp:
		return []byte(s), nil
	case InitializeOKLanguagePython:
		return []byte(s), nil
	case InitializeOKLanguageRuby:
		return []byte(s), nil
	case InitializeOKLanguageRust:
		return []byte(s), nil
	case InitializeOKLanguageNode:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InitializeOKLanguage) UnmarshalText(data []byte) error {
	switch InitializeOKLanguage(data) {
	case InitializeOKLanguageGo:
		*s = InitializeOKLanguageGo
		return nil
	case InitializeOKLanguagePerl:
		*s = InitializeOKLanguagePerl
		return nil
	case InitializeOKLanguagePhp:
		*s = InitializeOKLanguagePhp
		return nil
	case InitializeOKLanguagePython:
		*s = InitializeOKLanguagePython
		return nil
	case InitializeOKLanguageRuby:
		*s = InitializeOKLanguageRuby
		return nil
	case InitializeOKLanguageRust:
		*s = InitializeOKLanguageRust
		return nil
	case InitializeOKLanguageNode:
		*s = InitializeOKLanguageNode
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 問い合わせ内容.
// Ref: #/components/schemas/InquiryContent
type InquiryContent struct {
	// 問い合わせID.
	ID string `json:"id"`
	// 件名.
	Subject string `json:"subject"`
	// 問い合わせ内容.
	Body string `json:"body"`
	// 問い合わせ日時.
	CreatedAt float64 `json:"created_at"`
}

// GetID returns the value of ID.
func (s *InquiryContent) GetID() string {
	return s.ID
}

// GetSubject returns the value of Subject.
func (s *InquiryContent) GetSubject() string {
	return s.Subject
}

// GetBody returns the value of Body.
func (s *InquiryContent) GetBody() string {
	return s.Body
}

// GetCreatedAt returns the value of CreatedAt.
func (s *InquiryContent) GetCreatedAt() float64 {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *InquiryContent) SetID(val string) {
	s.ID = val
}

// SetSubject sets the value of Subject.
func (s *InquiryContent) SetSubject(val string) {
	s.Subject = val
}

// SetBody sets the value of Body.
func (s *InquiryContent) SetBody(val string) {
	s.Body = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *InquiryContent) SetCreatedAt(val float64) {
	s.CreatedAt = val
}

func (*InquiryContent) getInquiryRes() {}

// NewOptCoordinate returns new OptCoordinate with value set to v.
func NewOptCoordinate(v Coordinate) OptCoordinate {
	return OptCoordinate{
		Value: v,
		Set:   true,
	}
}

// OptCoordinate is optional Coordinate.
type OptCoordinate struct {
	Value Coordinate
	Set   bool
}

// IsSet returns true if OptCoordinate was set.
func (o OptCoordinate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCoordinate) Reset() {
	var v Coordinate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCoordinate) SetTo(v Coordinate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCoordinate) Get() (v Coordinate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCoordinate) Or(d Coordinate) Coordinate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDriver returns new OptDriver with value set to v.
func NewOptDriver(v Driver) OptDriver {
	return OptDriver{
		Value: v,
		Set:   true,
	}
}

// OptDriver is optional Driver.
type OptDriver struct {
	Value Driver
	Set   bool
}

// IsSet returns true if OptDriver was set.
func (o OptDriver) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDriver) Reset() {
	var v Driver
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDriver) SetTo(v Driver) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDriver) Get() (v Driver, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDriver) Or(d Driver) Driver {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEvaluateReq returns new OptEvaluateReq with value set to v.
func NewOptEvaluateReq(v EvaluateReq) OptEvaluateReq {
	return OptEvaluateReq{
		Value: v,
		Set:   true,
	}
}

// OptEvaluateReq is optional EvaluateReq.
type OptEvaluateReq struct {
	Value EvaluateReq
	Set   bool
}

// IsSet returns true if OptEvaluateReq was set.
func (o OptEvaluateReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEvaluateReq) Reset() {
	var v EvaluateReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEvaluateReq) SetTo(v EvaluateReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEvaluateReq) Get() (v EvaluateReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEvaluateReq) Or(d EvaluateReq) EvaluateReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPostInquiryReq returns new OptPostInquiryReq with value set to v.
func NewOptPostInquiryReq(v PostInquiryReq) OptPostInquiryReq {
	return OptPostInquiryReq{
		Value: v,
		Set:   true,
	}
}

// OptPostInquiryReq is optional PostInquiryReq.
type OptPostInquiryReq struct {
	Value PostInquiryReq
	Set   bool
}

// IsSet returns true if OptPostInquiryReq was set.
func (o OptPostInquiryReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPostInquiryReq) Reset() {
	var v PostInquiryReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPostInquiryReq) SetTo(v PostInquiryReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPostInquiryReq) Get() (v PostInquiryReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPostInquiryReq) Or(d PostInquiryReq) PostInquiryReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPostRequestReq returns new OptPostRequestReq with value set to v.
func NewOptPostRequestReq(v PostRequestReq) OptPostRequestReq {
	return OptPostRequestReq{
		Value: v,
		Set:   true,
	}
}

// OptPostRequestReq is optional PostRequestReq.
type OptPostRequestReq struct {
	Value PostRequestReq
	Set   bool
}

// IsSet returns true if OptPostRequestReq was set.
func (o OptPostRequestReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPostRequestReq) Reset() {
	var v PostRequestReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPostRequestReq) SetTo(v PostRequestReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPostRequestReq) Get() (v PostRequestReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPostRequestReq) Or(d PostRequestReq) PostRequestReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRegisterDriverReq returns new OptRegisterDriverReq with value set to v.
func NewOptRegisterDriverReq(v RegisterDriverReq) OptRegisterDriverReq {
	return OptRegisterDriverReq{
		Value: v,
		Set:   true,
	}
}

// OptRegisterDriverReq is optional RegisterDriverReq.
type OptRegisterDriverReq struct {
	Value RegisterDriverReq
	Set   bool
}

// IsSet returns true if OptRegisterDriverReq was set.
func (o OptRegisterDriverReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRegisterDriverReq) Reset() {
	var v RegisterDriverReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRegisterDriverReq) SetTo(v RegisterDriverReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRegisterDriverReq) Get() (v RegisterDriverReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRegisterDriverReq) Or(d RegisterDriverReq) RegisterDriverReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRegisterUserReq returns new OptRegisterUserReq with value set to v.
func NewOptRegisterUserReq(v RegisterUserReq) OptRegisterUserReq {
	return OptRegisterUserReq{
		Value: v,
		Set:   true,
	}
}

// OptRegisterUserReq is optional RegisterUserReq.
type OptRegisterUserReq struct {
	Value RegisterUserReq
	Set   bool
}

// IsSet returns true if OptRegisterUserReq was set.
func (o OptRegisterUserReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRegisterUserReq) Reset() {
	var v RegisterUserReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRegisterUserReq) SetTo(v RegisterUserReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRegisterUserReq) Get() (v RegisterUserReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRegisterUserReq) Or(d RegisterUserReq) RegisterUserReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRequestStatus returns new OptRequestStatus with value set to v.
func NewOptRequestStatus(v RequestStatus) OptRequestStatus {
	return OptRequestStatus{
		Value: v,
		Set:   true,
	}
}

// OptRequestStatus is optional RequestStatus.
type OptRequestStatus struct {
	Value RequestStatus
	Set   bool
}

// IsSet returns true if OptRequestStatus was set.
func (o OptRequestStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRequestStatus) Reset() {
	var v RequestStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRequestStatus) SetTo(v RequestStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRequestStatus) Get() (v RequestStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRequestStatus) Or(d RequestStatus) RequestStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// PostDriverCoordinateNoContent is response for PostDriverCoordinate operation.
type PostDriverCoordinateNoContent struct{}

// PostInquiryNoContent is response for PostInquiry operation.
type PostInquiryNoContent struct{}

type PostInquiryReq struct {
	// 件名.
	Subject string `json:"subject"`
	// 問い合わせ内容.
	Body string `json:"body"`
}

// GetSubject returns the value of Subject.
func (s *PostInquiryReq) GetSubject() string {
	return s.Subject
}

// GetBody returns the value of Body.
func (s *PostInquiryReq) GetBody() string {
	return s.Body
}

// SetSubject sets the value of Subject.
func (s *PostInquiryReq) SetSubject(val string) {
	s.Subject = val
}

// SetBody sets the value of Body.
func (s *PostInquiryReq) SetBody(val string) {
	s.Body = val
}

type PostRequestAccepted struct {
	// 配車要求ID.
	RequestID string `json:"request_id"`
}

// GetRequestID returns the value of RequestID.
func (s *PostRequestAccepted) GetRequestID() string {
	return s.RequestID
}

// SetRequestID sets the value of RequestID.
func (s *PostRequestAccepted) SetRequestID(val string) {
	s.RequestID = val
}

type PostRequestReq struct {
	// 配車位置.
	PickupCoordinate Coordinate `json:"pickup_coordinate"`
	// 目的地.
	DestinationCoordinate Coordinate `json:"destination_coordinate"`
}

// GetPickupCoordinate returns the value of PickupCoordinate.
func (s *PostRequestReq) GetPickupCoordinate() Coordinate {
	return s.PickupCoordinate
}

// GetDestinationCoordinate returns the value of DestinationCoordinate.
func (s *PostRequestReq) GetDestinationCoordinate() Coordinate {
	return s.DestinationCoordinate
}

// SetPickupCoordinate sets the value of PickupCoordinate.
func (s *PostRequestReq) SetPickupCoordinate(val Coordinate) {
	s.PickupCoordinate = val
}

// SetDestinationCoordinate sets the value of DestinationCoordinate.
func (s *PostRequestReq) SetDestinationCoordinate(val Coordinate) {
	s.DestinationCoordinate = val
}

type RegisterDriverCreated struct {
	// アクセストークン.
	AccessToken string `json:"access_token"`
	// ドライバーID.
	ID string `json:"id"`
}

// GetAccessToken returns the value of AccessToken.
func (s *RegisterDriverCreated) GetAccessToken() string {
	return s.AccessToken
}

// GetID returns the value of ID.
func (s *RegisterDriverCreated) GetID() string {
	return s.ID
}

// SetAccessToken sets the value of AccessToken.
func (s *RegisterDriverCreated) SetAccessToken(val string) {
	s.AccessToken = val
}

// SetID sets the value of ID.
func (s *RegisterDriverCreated) SetID(val string) {
	s.ID = val
}

type RegisterDriverReq struct {
	// ドライバー名.
	Username string `json:"username"`
	// 名前.
	Firstname string `json:"firstname"`
	// 名字.
	Lastname string `json:"lastname"`
	// 生年月日.
	DateOfBirth string `json:"date_of_birth"`
	// 車種.
	CarModel string `json:"car_model"`
	// カーナンバー.
	CarNo string `json:"car_no"`
}

// GetUsername returns the value of Username.
func (s *RegisterDriverReq) GetUsername() string {
	return s.Username
}

// GetFirstname returns the value of Firstname.
func (s *RegisterDriverReq) GetFirstname() string {
	return s.Firstname
}

// GetLastname returns the value of Lastname.
func (s *RegisterDriverReq) GetLastname() string {
	return s.Lastname
}

// GetDateOfBirth returns the value of DateOfBirth.
func (s *RegisterDriverReq) GetDateOfBirth() string {
	return s.DateOfBirth
}

// GetCarModel returns the value of CarModel.
func (s *RegisterDriverReq) GetCarModel() string {
	return s.CarModel
}

// GetCarNo returns the value of CarNo.
func (s *RegisterDriverReq) GetCarNo() string {
	return s.CarNo
}

// SetUsername sets the value of Username.
func (s *RegisterDriverReq) SetUsername(val string) {
	s.Username = val
}

// SetFirstname sets the value of Firstname.
func (s *RegisterDriverReq) SetFirstname(val string) {
	s.Firstname = val
}

// SetLastname sets the value of Lastname.
func (s *RegisterDriverReq) SetLastname(val string) {
	s.Lastname = val
}

// SetDateOfBirth sets the value of DateOfBirth.
func (s *RegisterDriverReq) SetDateOfBirth(val string) {
	s.DateOfBirth = val
}

// SetCarModel sets the value of CarModel.
func (s *RegisterDriverReq) SetCarModel(val string) {
	s.CarModel = val
}

// SetCarNo sets the value of CarNo.
func (s *RegisterDriverReq) SetCarNo(val string) {
	s.CarNo = val
}

// RegisterUserBadRequest is response for RegisterUser operation.
type RegisterUserBadRequest struct{}

func (*RegisterUserBadRequest) registerUserRes() {}

type RegisterUserOK struct {
	// アクセストークン.
	AccessToken string `json:"access_token"`
	// ユーザーID.
	ID string `json:"id"`
}

// GetAccessToken returns the value of AccessToken.
func (s *RegisterUserOK) GetAccessToken() string {
	return s.AccessToken
}

// GetID returns the value of ID.
func (s *RegisterUserOK) GetID() string {
	return s.ID
}

// SetAccessToken sets the value of AccessToken.
func (s *RegisterUserOK) SetAccessToken(val string) {
	s.AccessToken = val
}

// SetID sets the value of ID.
func (s *RegisterUserOK) SetID(val string) {
	s.ID = val
}

func (*RegisterUserOK) registerUserRes() {}

type RegisterUserReq struct {
	// ユーザー名.
	Username string `json:"username"`
	// 名前.
	Firstname string `json:"firstname"`
	// 名字.
	Lastname string `json:"lastname"`
	// 生年月日.
	DateOfBirth string `json:"date_of_birth"`
}

// GetUsername returns the value of Username.
func (s *RegisterUserReq) GetUsername() string {
	return s.Username
}

// GetFirstname returns the value of Firstname.
func (s *RegisterUserReq) GetFirstname() string {
	return s.Firstname
}

// GetLastname returns the value of Lastname.
func (s *RegisterUserReq) GetLastname() string {
	return s.Lastname
}

// GetDateOfBirth returns the value of DateOfBirth.
func (s *RegisterUserReq) GetDateOfBirth() string {
	return s.DateOfBirth
}

// SetUsername sets the value of Username.
func (s *RegisterUserReq) SetUsername(val string) {
	s.Username = val
}

// SetFirstname sets the value of Firstname.
func (s *RegisterUserReq) SetFirstname(val string) {
	s.Firstname = val
}

// SetLastname sets the value of Lastname.
func (s *RegisterUserReq) SetLastname(val string) {
	s.Lastname = val
}

// SetDateOfBirth sets the value of DateOfBirth.
func (s *RegisterUserReq) SetDateOfBirth(val string) {
	s.DateOfBirth = val
}

// 配車要求ステータス
// matching:
// サービス上でマッチング処理を行なっていてドライバーが確定していない
// dispatching: ドライバーが確定し、乗車位置に向かっている
// dispatched:
// ドライバーが乗車位置に到着して、ユーザーの乗車を待機している
// carrying: ユーザーが乗車し、ドライバーが目的地に向かっている
// arrived: 目的地に到着した
// completed: ユーザーの決済・ドライバー評価が完了した
// canceled:
// 何らかの理由により途中でキャンセルされた(一定時間待ったがドライバーを割り当てられなかった場合などを想定).
// Ref: #/components/schemas/RequestStatus
type RequestStatus string

const (
	RequestStatusMatching    RequestStatus = "matching"
	RequestStatusDispatching RequestStatus = "dispatching"
	RequestStatusCarrying    RequestStatus = "carrying"
	RequestStatusArrived     RequestStatus = "arrived"
	RequestStatusCompleted   RequestStatus = "completed"
	RequestStatusCanceled    RequestStatus = "canceled"
	RequestStatusDispatched  RequestStatus = "dispatched"
)

// AllValues returns all RequestStatus values.
func (RequestStatus) AllValues() []RequestStatus {
	return []RequestStatus{
		RequestStatusMatching,
		RequestStatusDispatching,
		RequestStatusCarrying,
		RequestStatusArrived,
		RequestStatusCompleted,
		RequestStatusCanceled,
		RequestStatusDispatched,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RequestStatus) MarshalText() ([]byte, error) {
	switch s {
	case RequestStatusMatching:
		return []byte(s), nil
	case RequestStatusDispatching:
		return []byte(s), nil
	case RequestStatusCarrying:
		return []byte(s), nil
	case RequestStatusArrived:
		return []byte(s), nil
	case RequestStatusCompleted:
		return []byte(s), nil
	case RequestStatusCanceled:
		return []byte(s), nil
	case RequestStatusDispatched:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RequestStatus) UnmarshalText(data []byte) error {
	switch RequestStatus(data) {
	case RequestStatusMatching:
		*s = RequestStatusMatching
		return nil
	case RequestStatusDispatching:
		*s = RequestStatusDispatching
		return nil
	case RequestStatusCarrying:
		*s = RequestStatusCarrying
		return nil
	case RequestStatusArrived:
		*s = RequestStatusArrived
		return nil
	case RequestStatusCompleted:
		*s = RequestStatusCompleted
		return nil
	case RequestStatusCanceled:
		*s = RequestStatusCanceled
		return nil
	case RequestStatusDispatched:
		*s = RequestStatusDispatched
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 簡易ユーザー情報.
// Ref: #/components/schemas/User
type User struct {
	// ユーザーID.
	ID string `json:"id"`
	// ユーザー名.
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s *User) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *User) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *User) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *User) SetName(val string) {
	s.Name = val
}
